# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}

#***********customer alias***********
# Console 
snippet log
	console.log(${1});
snippet info
	console.info(${1});
snippet err
	console.error(${1});
# Comments
snippet **
	/**
	 * ${1}
	 * @param {${2}}
	 * @returns {${3}}
	 */

snippet *
	/* 
	 * ${1}
	 */

# React related
snippet react
	import React, { Component, PropTypes } from 'react';
	
	class ${1:component_name} extends Component {
		componentDidMount() {
			
		}

		render() {
			return (
			);
		}
	}
	${2:$1}.propTypes = {
	};

snippet reactf
	import React, { PropTypes } from 'react';

	const ${1:component_name} = (props) =>
	(
	);

	${2:$1}.propTypes = {
	};

snippet reactfun
	import React, { PropTypes } from 'react';

	const ${1:component_name} = (props) => {
		return (
		);
	}

	${2:$1}.propTypes = {
	};

snippet reducer
	import ${1:action_name}_ACTION from '../constants';

	const initialState = {
	};

	export default (state = initialState, action) => {
		const payload = action.payload;
		if (action.type === ${2:$1}_ACTION && payload) {
			return { ...state, ...payload };
		}
		return state;
	}

# sync action
snippet action
	const ${1:action_name} = (${2}) => ({ type: ${3}, payload: { ${4} } });

#aync action
snippet aaction
	const ${1:action_name} = (${2: }) => (dispatch, getState) => {
		const ${3}State = getState().${4};
		return dispatch(${5});
	};

